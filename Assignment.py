#!/usr/bin/python 
#Deleting previous line breaks the code... lol
import getpass
import time
# import the python renderman library
import prman
 # create an instance of the RenderMan interface
ri = prman.Ri()
# Add Tabs to the rib output so that its easier to read. 
ri.Option("rib", {"string asciistyle": "indented"})

#------------------------------------------------Begining of Functions------------------------------------------------

def Rectangle(width,height,depth) :	
    ri.TransformBegin()
    w=width/2.0
    h=height/2.0
    d=depth/2.0
    ri.ArchiveRecord(ri.COMMENT, '--Rectangle Generated by Rectangle Function--')
    #rear
    face=[-w,-h,d,-w,h,d,w,-h,d,w,h,d]	
    ri.Patch("bilinear",{'P':face})
    #front
    face=[-w,-h,-d,-w,h,-d,w,-h,-d,w,h,-d]								
    ri.Patch("bilinear",{'P':face})
    #left
    face=[-w,-h,-d,-w,h,-d,-w,-h,d,-w,h,d]									
    ri.Patch("bilinear",{'P':face })
    #right
    face=[w,-h,-d,w,h,-d,w,-h,d,w,h,d]								
    ri.Patch("bilinear",{'P':face})
    #bottom
    face=[w,-h,d,w,-h,-d,-w,-h,d,-w,-h,-d]								
    ri.Patch("bilinear",{'P':face})
    #top
    face=[w,h,d,w,h,-d,-w,h,d,-w,h,-d]								
    ri.Patch("bilinear",{'P':face})
    ri.TransformEnd();
    ri.ArchiveRecord(ri.COMMENT, '--!End of Rectangle Function!--')

def Ring():
    ri.ArchiveRecord(ri.COMMENT, '--Ring Generated by Ring Function--')
    grey = 0.15
    baseColorRing = [ grey,grey, grey]
    metallic = 0.67
    clearcoat = 0.67
    clearcoatgloss = 1.0
    specular = 0.8
    roughness = 0.2
    
    #Set up the rings bump map (Scratches)
    ri.Pattern("PxrBump","ringBump",{
                                        "string filename" : "bump.tx",
                                        "float scale": 0.05,
                                        "int invertT" : 0
                                    })
    #Generate the rings shader pattern for the orange part. 
    ri.Pattern("PxrOSL","ringShader", {
                                        "string shader"  : "ring" 
                                      })

    #Generates a standard shader pattern
    ri.Pattern("PxrOSL","standardShader", { 
                                            "string shader"  : "standard" ,
                                            "color Cin" : baseColorRing,
                                            "float reflectionAmount" : 0.2
                                          })
    #Create the BXDF material, using the pattern from the standard shader.
    ri.Bxdf( "PxrDisney","bxdf", { 
                                    "reference color baseColor" : ["standardShader:Cout"],
                                    "reference normal bumpNormal" : ["ringBump:resultN"],
                                    "float metallic" : metallic,
                                    "float clearcoat" :clearcoat,
                                    "float clearcoatGloss" :clearcoatgloss,
                                    "float specular" :specular,
                                    "float roughness" :roughness
                                 })


    #Create the base of the ring, 
    #the black part using a standard shader that has an input of color, 
    #and will out put that color with the HDR image on it.
    ri.TransformBegin() 
    ri.Rotate(70,0,1,0)
    ri.Rotate(135,0,0,1)
    ri.Torus(1,0.6,-45,45,360)
    #Create the Orange wood effect of the ring by adding two partly drawn toruses
    #This uses the ringwood shader that generates a wood like effect. 
    ri.Bxdf( "PxrDisney","bxdf", { 
                                    "reference color baseColor" : ["ringShader:Cout"],
                                    "reference normal bumpNormal" : ["ringBump:resultN"],
                                    "float metallic" : metallic,
                                    "float clearcoat" :clearcoat,
                                    "float clearcoatGloss" :clearcoatgloss,
                                    "float specular" :specular,
                                    "float roughness" :roughness
                                 })
    #Bottom Orange Wood Ring
    ri.Torus(1,0.61,-7,-30,360)
    #Top Orange Wood Ring
    ri.Torus(1,0.61,7,30,360)
    #Create a cylinder to increase the thickness of the ring so it doesn't look so flat
    ri.Bxdf( "PxrDisney","bxdf", { 
                                    "reference color baseColor" : ["standardShader:Cout"],
                                    "reference normal bumpNormal" : ["ringBump:resultN"],
                                    "float metallic" : metallic,
                                    "float clearcoat" :clearcoat,
                                    "float clearcoatGloss" :clearcoatgloss,
                                    "float specular" :specular,
                                    "float roughness" :roughness
                                 })
    ri.Cylinder(1.45,-0.4,0.4,360)
    ri.TransformEnd()
    ri.ArchiveRecord(ri.COMMENT, '--!End of Ring Function!--')
    
    



def Table():
#------Table------
    ri.ArchiveRecord(ri.COMMENT, '--Table Generated by Table Function--')
    #Generate the pattern from the tableshader. 
    ri.Pattern("PxrOSL","tableShader", { 
                                        "string shader"  : "table" 
                                       })
    ri.TransformBegin()
    ri.Translate( 0,-1,3)
    #create the bxdf material using our pattern generated earlier. 
    ri.Bxdf( "PxrDisney","bxdf", { 
                                    "reference color baseColor" : ["tableShader:Cout"],
                                    "float sheen":0.4,
                                    "float specular" :0.8,
                                    "float specularTint" :0.5
                                })
    #Generate the geometry for our table. 
    ri.Rotate(90,0,1,0)
    Rectangle(30,0.1,50)
    ri.TransformEnd()
    ri.ArchiveRecord(ri.COMMENT, '--!End of Table Function!--')
#------!Table------


def Wall():
#------Wall------
    ri.ArchiveRecord(ri.COMMENT, '--Wall Generated by Wall Function--')
    ri.TransformBegin()
    ri.Translate( 0,0,10)
    ri.Rotate(90,1,0,0)
    ri.Pattern("PxrOSL","standardShader", { "string shader"  : "standard" ,
                                            "color Cin" : [0.75,0.75,0.8],
                                            "float reflectionAmount" : 0.2
                                })
    ri.Bxdf( "PxrDisney","bxdf", { 
                                "reference color baseColor" : ["standardShader:Cout"]
                        })
    #Generate the geometry for our wall.                     
    Rectangle(50,0.1,30)
    ri.TransformEnd()
    ri.ArchiveRecord(ri.COMMENT, '--!End of Wall Function!--')
#------!Wall------

#------------------------------------------------End of Functions------------------------------------------------

filename = "LloydAssignment.rib"
#Begin the rib file. 
ri.Begin(filename)

ri.ArchiveRecord(ri.COMMENT, 'File ' +filename)
ri.ArchiveRecord(ri.COMMENT, "Created by " + getpass.getuser())
ri.ArchiveRecord(ri.COMMENT, "Creation Date: " +time.ctime(time.time()))


#TO FRAME BUFFER
#ri.Display("LloydAssignment.exr", "framebuffer", "rgba")

#TO FILE
#change it too file to output. 
ri.Display("LloydAssignment.exr", "it", "rgba")
ri.Format(1280,720,1)

#Fix the sampling to 720 to reduce noise, put pixel variance low for better look. 
ri.Hider("raytrace" ,{"int incremental" :[2], "int maxsamples" : 720, "int minsamples" : 720 })
ri.PixelVariance (0.01)
ri.ShadingRate(10)

#Use default to model, makes it easier.
#ri.Integrator ("PxrDefault" , "integrator")

#Path tracer for final lighting and shading. 
ri.Integrator ("PxrPathTracer" ,"integrator")

# now set the projection to perspective
ri.Projection(ri.PERSPECTIVE,{ri.FOV:30} )

#Move our camera into place.
ri.Rotate(-25,1,0,0)
ri.Translate(0,-6,12)

# Begin The World
ri.WorldBegin()

#-------------------Lights--------------------
#Add a few lights to brighten up the scene. 
ri.AttributeBegin()
ri.Declare("areaLight" ,"string")
ri.AreaLightSource( "PxrStdAreaLight", {ri.HANDLEID:"areaLight", 
                                        "float exposure" : [10]
                                       })

ri.Bxdf( "PxrDisney","bxdf", { 
                        "color emitColor" : [ 1,1,1]
                        })
#Light 1 (South West)
ri.TransformBegin()
ri.Translate(10, 8,4)
ri.Scale(4,4,4)
ri.Geometry("spherelight")
ri.TransformEnd()
#Light 2 (North East)
ri.TransformBegin()
ri.Translate(-10, 8,4)
ri.Scale(4,4,4)
ri.Geometry("spherelight")
ri.TransformEnd()
ri.TransformBegin()
#Light 3 (South East)
ri.Translate(10,8,-8)
ri.Scale(4,4,4)
ri.Geometry("spherelight")
ri.TransformEnd()
ri.AttributeEnd()
#-------------------!Lights--------------------




# start our drawings
Table()
Wall()
#Move the ring so no clipping. 
ri.Translate(0,0.55,0)
Ring()

# End The world
ri.WorldEnd()
# End the rib file
ri.End()





